apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.github.dcendents.android-maven'

repositories {
    google()
    jcenter()
    mavenCentral()
    maven { url "https://jitpack.io" }
}

group = Config.group
version = '2.5.0'

android {
    compileSdkVersion Config.compileSdk
    buildToolsVersion Config.buildTools

    defaultConfig {
        minSdkVersion Config.minSdk
        targetSdkVersion Config.targetSdk
        versionName version
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility Config.javaVersion
        targetCompatibility Config.javaVersion
    }
}

dependencies {

    implementation Dependencies.legacySupportV4
    api Dependencies.legacySupportV13

    api Dependencies.constraintLayout

    api Dependencies.playServicesAds
    api Dependencies.consentLibrary

    api Dependencies.appcompat

    api Dependencies.material

    implementation Dependencies.glide
    kapt Dependencies.glideCompiler

    implementation Dependencies.coreKTX
    implementation Dependencies.kotlinStdlibJdk7

    implementation Dependencies.lifecycleExt
    implementation Dependencies.viewmodelKTX
    implementation Dependencies.livedataKTX
    implementation Dependencies.runtimeKTX
    implementation Dependencies.okhttp
    implementation Dependencies.okio
    implementation Dependencies.retrofit
    implementation Dependencies.retrofitConverterGson
    api Dependencies.gson
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
