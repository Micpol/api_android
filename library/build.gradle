apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.github.dcendents.android-maven'

repositories {
    google()
    jcenter()
    mavenCentral()
    maven { url "https://jitpack.io" }
}

group = 'com.github.netigenkluzowicz'
version = '2.3.0-rc02'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionName version
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation libraries.legacySupportV4
    api libraries.legacySupportV13

    api libraries.constraintLayout

    api libraries.playServicesAds
    api libraries.consentLibrary

    api libraries.appcompat

    api libraries.material

    implementation libraries.glide
    kapt libraries.glideCompiler

    implementation libraries.coreKTX
    implementation libraries.kotlinStdlibJdk7

    implementation libraries.lifecycleExt
    implementation libraries.viewmodelKTX
    implementation libraries.livedataKTX
    implementation libraries.runtimeKTX
    implementation libraries.okhttp
    implementation libraries.okio
    implementation libraries.retrofit
    implementation libraries.retrofitConverterGson
    api libraries.gson
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
